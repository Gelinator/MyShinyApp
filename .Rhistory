dim(validation);dim(training);dim(testing)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
newData <- data.frame(randomPred,grosPred,lowPred,testing$diagnosis)
fullForest <- train(testing.diagnosis ~ ., newData,method="rf")
fullForest
newData <- data.frame(randomPred,grosPred,lowPred,diagnosis = testing$diagnosis)
fullForest <- train(diagnosis ~ ., newData,method="rf")
fullPred <- predict(fullForest,testing)
confusionMatrix(fullPred,testing$diagnosis)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
randomF <- train(diagnosis ~ ., training, method="rf")
grosBonMechant <- train(diagnosis ~ ., training, method="gbm")
lowDensityAss <- train(diagnosis ~ ., training, method="lda")
randomPred <- predict(randomF,testing)
grosPred <- predict(grosBonMechant,testing)
lowPred <- predict(lowDensityAss,testing)
newData <- data.frame(randomPred,grosPred,lowPred,diagnosis = testing$diagnosis)
fullForest <- train(diagnosis ~ ., newData,method="rf")
fullPred <- predict(fullForest,testing)
confusionMatrix(fullPred,testing$diagnosis)
confusionMatrix(randomPred,testing$diagnosis)
confusionMatrix(grosPred,testing$diagnosis)
confusionMatrix(lowPred,testing$diagnosis)
confusionMatrix(fullPred,testing$diagnosis)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
lassie <- train(CompressiveStrength ~ .,method="lasso",training)
lassie
plot(lassie)
plot(lassie$results)
plot(lassie$coefnames)
plot(lassie$finalModel)
plot(lassie$modelType)
plot(lassie$modelInfo)
plot(lassie$results)
plot(lassie$bestTune)
plot(lassie$dots)
plot(lassie$control)
plot(lassie$finalModel)
plot(log(lassie$finalModel))
plot(log(-lassie$finalModel))
lassie$finalModel
installed.packages()[1]=="kmeans"
installed.packages()[1]
installed.packages()[,1]
sum(installed.packages()[,1]=="kmeans")
install.packages("kmeans")
install.packages(c("car", "ChainLadder", "class", "CORElearn", "curl", "DAAG", "dplyr", "foreign", "lme4", "MASS", "mime", "nlme", "nnet", "quantreg", "R6", "rmarkdown", "RMySQL", "scales", "SparseM", "spatial", "systemfit", "xml2"))
install.packages(c("car", "ChainLadder", "class", "CORElearn",
install.packages(c("car", "ChainLadder", "class", "CORElearn", "curl", "DAAG", "dplyr", "foreign", "lme4", "MASS", "mime", "nlme", "nnet", "quantreg", "R6", "rmarkdown", "RMySQL", "scales", "SparseM", "spatial", "systemfit", "xml2"))
install.packages(c("car", "ChainLadder", "class", "CORElearn", "curl", "DAAG", "dplyr", "foreign", "lme4", "MASS", "mime", "nlme", "nnet", "quantreg", "R6", "rmarkdown", "RMySQL", "scales", "SparseM", "spatial", "systemfit", "xml2"))
install.packages(c("CORElearn", "RMySQL"))
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
library(caret)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
fit <- train(CompressiveStrength ~ .,training,method="e1071")
fit <- train(CompressiveStrength ~ .,training,method="svm")
fit <- train(CompressiveStrength ~ .,training,method="lsvm")
fit <- train(CompressiveStrength ~ .,training,method="svml")
fit <- train(CompressiveStrength ~ .,training,method="svmLinear")
fit
require(e1071)
?"e1071"
?e1071
?"e1071-deprecated"
fit <- train(CompressiveStrength ~ .,training,method="lssvmLinear")
fit <- train(CompressiveStrength ~ .,training,method="lssvmRadial")
fit
fit <- train(CompressiveStrength ~ .,training,method="svmRadial")
fit
pred <- predict(fit,testing)
confusionMatrix(pred,testing$CompressiveStrength)
pred
RMSE(pred,testing$CompressiveStrength)
fit <- train(CompressiveStrength ~ .,training,method="svmLinear")
pred <- predict(fit,testing)
RMSE(pred,testing$CompressiveStrength)
set.seed(325)
fit <- train(CompressiveStrength ~ .,training,method="svmLinear")
pred <- predict(fit,testing)
RMSE(pred,testing$CompressiveStrength)
install.packages("e1071")
install.packages("e1071")
set.seed(3523)
library(AppliedPredictiveModeling)
library(caret)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
fit <- train(CompressiveStrength ~ .,training,method="e1071")
fit <- train(CompressiveStrength ~ .,training,method="svm")
library(e1071)
svim <- svm(CompressiveStrength ~ .,training)
pred <- predict(svim,testing)
RMSE(pred,testing$CompressiveStrength)
set.seed(325)
svim <- svm(CompressiveStrength ~ .,training)
pred <- predict(svim,testing)
RMSE(pred,testing$CompressiveStrength)
set.seed(3523)
library(AppliedPredictiveModeling)
library(caret)
library(e1071)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
svim <- svm(CompressiveStrength ~ .,training)
pred <- predict(svim,testing)
RMSE(pred,testing$CompressiveStrength)
ï¿¼library(lubridate)  # For year() function below
library(lubridate)
install.packages("lubridate")
library(lubridate)
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
bats
bats()
library(bats)
install.packages("bats")
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
lassie <- train(CompressiveStrength ~ .,method="lasso",training)
elasticnet::plot.enet(lassie)
elasticnet::plot.enet(lassie$finalModel)
plot.enet(lassie$results)
plot.enet(lassie$modelInfo)
plot.enet(lassie$xlevels)
plot.enet(lassie$finalModel,xvar="penalty",use.color = T)
update.packages()
library(caret)
library(forecast)
install.packages("forecast")
update.packageStatus("forecast")
library(lubridate)
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
fit <- bats(training)
library(forecast)
fit <- bats(training)
tstrain = ts(training$visitsTumblr)
fit <- bats(tstrain)
predict(fit,testing)
predict(fit,testing$visitsTumblr)
?bats
forecast.bats(fit)
preds <- forecast.bats(fit)
ls()
tail(training)
head(testing)
plot(fit)
plot(forecast(fit))
forecast::plot.bats(fit)
preds <- forecast.bats(testing$visitsTumblr)
preds <- forecast.bats(visitsTumblr,data=testing)
?forecast.bats
preds <- forecast.bats(fit,level=95,h=length(testing))
plot.bats(preds)
plot(preds)
plot(testing)
accuracy(preds,testing)
accuracy(fit,testing)
accuracy(fit$fitted.values,testing)
accuracy(fit$fitted.values,testing$visitsTumblr)
fit <- bats(tstrain)
preds <- forecast(fit,level=95)
plot(preds)
length(preds)
preds <- forecast(fit,level=95,h=235)
plot(preds)
accuracy(preds,testing$visitsTumblr)
preds$x
preds$upper
cbind(preds$lower,preds$upper
)
library(ElemStatLearn)
library(caret)
data("vowel.train")
library(ElemStatLearn)
library(caret)
data("vowel.train")
data("vowel.test")
vowel.test$y <- as.factor(vowel.test$y)
vowel.train$y <- as.factor(vowel.train$y)
set.seed(33833)
fitRF <- train(y ~., vowel.train,method="rf",importance=F)
fitGBM <- train(y ~., vowel.train,method="gbm")
rfPred <- predict(fitRF,vowel.test)
gbmPred <- predict(fitGBM,vowel.test)
rfMat <- confusionMatrix(vowel.test$y,rfPred)
gbmMat <- confusionMatrix(vowel.test$y,gbmPred)
rfMat
gbmMat
sum(gbmMat$table==rfMat$table)/(dim(gbmMat$table)[1]*dim(gbmMat$table)[2])
library(lubridate)
library(forecast)
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
fit <- bats(tstrain,)
preds <- forecast(fit,level=95,h=235)
plot(preds)
accuracy(preds,testing$visitsTumblr)
preds
fit <- bats(tstrain,use.trend = T)
preds <- forecast(fit,level=95,h=235)
plot(preds)
accuracy(preds,testing$visitsTumblr)
preds
fit <- bats(tstrain, use.damped.trend = T)
preds <- forecast(fit,level=95,h=235)
plot(preds)
fit <- bats(tstrain, use.box.cox =  T)
preds <- forecast(fit,level=95,h=235)
plot(preds)
preds
fit <- bats(tstrain)
preds <- forecast(fit,level=95,h=235)
plot(preds)
names(data.frame(pred))
pred <- forecast(fit,level=95,h=235)
plot(pred)
names(data.frame(pred))
predComb <- cbind(testing, data.frame(pred))
names(testing)
names(predComb)
predComb$in95 <- (predComb$Lo.95 < predComb$visitsTumblr) &
(predComb$visitsTumblr < predComb$Hi.95)
prop.table(table(predComb$in95))[2]
testing$visitsTumblr
compare <- data.frame(rfPred,gbmPred)
library(ElemStatLearn)
library(caret)
data("vowel.train")
data("vowel.test")
vowel.test$y <- as.factor(vowel.test$y)
vowel.train$y <- as.factor(vowel.train$y)
set.seed(33833)
fitRF <- train(y ~., vowel.train,method="rf",importance=F)
fitGBM <- train(y ~., vowel.train,method="gbm")
rfPred <- predict(fitRF,vowel.test)
gbmPred <- predict(fitGBM,vowel.test)
compare <- data.frame(rfPred,gbmPred)
compare$agree <- compare$rfPred == gbmPred
sum(compare$agree)/nrow(compare)
compare <- data.frame(rfPred,gbmPred,vowel.test$y)
sum(compare$vowel.test.y==compare$rfPred)/sum(compare$agree)
compare <- data.frame(rfPred,gbmPred,vowel.test$y)
compare$agree <- compare$rfPred == gbmPred
sum(compare$vowel.test.y==compare$rfPred)/sum(compare$agree)
load("~/Documents/MOOCs/Data Science/Practical Machine Learning/Assignment/Enviro.RData")
predict(SVM,testing)
SVM
confusionMatrix(predict(SVM,test2),test2$classe)
library(caret)
confusionMatrix(predict(SVM,test2),test2$classe)
inTrain <- createDataPartition(training$classe,p=.6,list=F)
train2 <- training[inTrain,]
test2 <- training[-inTrain,]
system.time(SVM <- train(classe ~ .,method="svmLinear",train2))
98.652/60
confusionMatrix(predict(SVM,test2),test2$classe)
predict(SVM,testing)
length(predict(SVM,testing))
confusionMatrix(predict(gbm,test2),test2$classe)
confusionMatrix(predict(neurons,test2),test2$classe)
predict(neurons,testing)
confusionMatrix(predict(treeTree,test2),test2$classe)
answers = rep("A", 20)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(answers)
system.time(foretAlea <- train(classe ~ .,method="rf",training, "pca")) #
system.time(foretAlea <- train(classe ~ .,method="rf",training)) #
inVal <- createDataPartition(train2$classe,p=.6,list=F)
inTrain <- createDataPartition(training$classe,p=.6,list=F)
train2 <- training[inTrain,]
test2 <- training[-inTrain,]
inVal <- createDataPartition(train2$classe,p=.6,list=F)
train2 <- train2[inTrain,]
validation <- train2[-inTrain,]
inTrain <- createDataPartition(training$classe,p=.6,list=F)
train2 <- training[inTrain,]
train2 <- training[inTrain,]
test2 <- training[-inTrain,]
train2 <- train2[inVal,]
validation <- train2[-inVal,]
system.time(SVM <- train(classe ~ .,method="svmLinear",train2))
confusionMatrix(predict(SVM,test2),test2$classe)
confusionMatrix(predict(SVM,validation),validation$classe)
system.time(Rf <- train(classe ~ .,method="rf",train2))
confusionMatrix(predict(rf,test2),test2$classe)
confusionMatrix(predict(rf,validation),validation$classe)
Rf
confusionMatrix(predict(Rf,validation),validation$classe)
confusionMatrix(predict(Rf,test2),test2$classe)
predict(Rf,testing)
library(caret)
data()
data("Seatbelts")
Seatbelts
plot(Seatbelts)
qplot(Seatbelts)
belts <- data.frame(Seatbelts)
rm(Seatbelts)
qplot(belts)
qplot(belts$kms,belts$VanKilled)
qplot(belts$kms,belts$VanKilled, color=belts$law)
rm(belts)
library(caret)
data("cars")
View(cars)
inTrain <- createDataPartition(cars$Price,p=.6,list=F)
train <- cars[inTrain,]
test <- cars[-inTrain,]
fit <- randomForest(Price ~ ., train)
library(randomForest)
fit <- randomForest(Price ~ ., train)
confusionMatrix(predict(fit,test),test$Price)
plot(predict(fit,test),test$Price)
qplot(predict(fit,test),test$Price) + geom_smooth(method="lm")
fitLM <- train(Price ~ ., train, method="lm")
qplot(predict(fitLM,test),test$Price) + geom_smooth(method="lm")
fitLM
fitLM$finalModel
fit
fit <- train(Price ~ ., train, method="rf")
qplot(predict(fit,test),test$Price) + geom_smooth(method="lm")
fit
fit <- randomForest(Price ~ ., train)
qplot(predict(fit,test),test$Price) + geom_smooth(method="lm")
data("mpg")
summary(mpg)
inTrain <- createDataPartition(mpg$hwy,p=.6,list=F)
train <- cars[inTrain,]
test <- cars[-inTrain,]
fit <- randomForest(hwy ~ ., train)
train <- mpg[inTrain,]
test <- mpg[-inTrain,]
fit <- randomForest(hwy ~ ., train)
fitLM <- train(hwy ~ ., train, method="lm")
qplot(predict(fit,test),test$Price) + geom_smooth(method="lm")
qplot(predict(fit,test),test$Price)
qplot(predict(fit,test),test$hwy) + geom_smooth(method="lm")
qplot(predict(fitLM,test),test$hwy) + geom_smooth(method="lm")
fit
fitLM
fit <- randomForest(hwy ~ ., train,ntree=10000)
qplot(predict(fit,test),test$hwy) + geom_smooth(method="lm")
fit
data()
install.packages("shiny")
library(shiny)
library(caret)
library(randomForest)
data("mpg")
mpg
data("cars")
cars
View(cars)
rm(cars,mpg)
library(caret)
library(randomForest)
data(mdrr)
mdrr <- mdrrDescr
mdrr$class <- mdrrClass
?mdrr
data(diamonds)
library(caret)
library(randomForest)
inTrain <- createDataPartition(diamonds$price,p=.1,list=F)
training <- diamonds[inTrain,]
testing <- diamonds[-inTrain,]
SVMl <- train(price ~ ., training,method="svmLinear",c("center","scale")) #75%
qplot(predict(SVMl,testing)[predict(SVMl,testing)>0],testing$price[predict(SVMl,testing)>0]) + geom_smooth(method="lm")
require(AppliedPredictiveModeling)
data(FuelEconomy)
cars <- data.frame(rbind(cars2010,cars2011,cars2012));# rm(cars2010,cars2011,cars2012)
inTrain <- createDataPartition(cars$FE,p=.65,list=F)
train <- cars[inTrain,]
test <- cars[-inTrain,]
require(caret)
require(randomForest)
inTrain <- createDataPartition(cars$FE,p=.65,list=F)
train <- cars[inTrain,]
test <- cars[-inTrain,]
rf <- randomForest(FE ~ .,train,ntree=5000)
summary(lm(predict(rf,test) ~ test$FE+0))
qplot(predict(rf,test) , test$FE) + geom_smooth(method="lm")
rf
lmfit
lmfit <- train(FE ~ .,train,method="lm",c("center","scale"))
lmfit
featurePlot(x = cars[, 1:4],
y = cars$FE,
plot = "pairs",
## Add a key at the top
auto.key = list(columns = 3))
featurePlot(x = cars[, 1:3],
y = cars$FE,
plot = "pairs",
## Add a key at the top
auto.key = list(columns = 3))
featurePlot(x = cars[, c(1:3,5:7)],
y = cars$FE,
plot = "pairs",
## Add a key at the top
auto.key = list(columns = 5))
featurePlot(x = cars[, c(1:3,5:7)],
y = cars$FE,
plot = "pairs",
## Add a key at the top
auto.key = list(columns = 6))
require(shiny)
require(manipulate)
require(caret)
shinyUI(pageWithSidebar(
headerPanel("Data Science FTW!"),
sidebarPanel(
h3('Sidebar text')
),
mainPanel(
h3('Main Panel text')
)
)
)
shiny::runApp('GitHub/MyShinyApp')
shiny::runApp('GitHub/MyShinyApp')
shiny::runApp('GitHub/MyShinyApp')
shiny::runApp('GitHub/MyShinyApp')
require(shiny)
require(manipulate)
require(caret)
require(shiny)
require(AppliedPredictiveModeling)
data(FuelEconomy)
names(cars)
names(cars2011)
shiny::runApp('GitHub/MyShinyApp')
shiny::runApp('GitHub/MyShinyApp')
shiny::runApp('GitHub/MyShinyApp')
shiny::runApp('GitHub/MyShinyApp')
shiny::runApp('GitHub/MyShinyApp')
shiny::runApp('GitHub/MyShinyApp')
require(caret)
data("iris")
rf <- train(Species ~ Petal.Length+Petal.Width,iris,method="rf",ntree=500,"pca")
rf
df <- data.frame(Petal.Length=PL,Petal.Width=PW)
PL <- input$pl
PW <- input$pw
df <- data.frame(Petal.Length=4,Petal.Width=1)
predict(rf,df)
shiny::runApp('GitHub/MyShinyApp')
predict(rf,c(1,1))
shiny::runApp('GitHub/MyShinyApp')
shiny::runApp('GitHub/MyShinyApp')
shiny::runApp('GitHub/MyShinyApp')
shiny::runApp('GitHub/MyShinyApp')
shiny::runApp('GitHub/MyShinyApp')
shiny::runApp('GitHub/MyShinyApp')
shiny::runApp('GitHub/MyShinyApp')
shiny::runApp('GitHub/MyShinyApp')
install.packages("devtools")
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='gelinator', token='7BD8F7493BCC23622E427CDFA67955F0', secret='gtr2BTLB6t9H2gMGS+pOxFNyavYH34B+a/aPXyP9')
setwd("~/GitHub/MyShinyApp")
shinyapps::deployApp('~/GitHub/MyShinyApp')
shinyapps::deployApp('~/GitHub/MyShinyApp')
shinyapps::deployApp('~/GitHub/MyShinyApp')
library(shiny)
runApp()
